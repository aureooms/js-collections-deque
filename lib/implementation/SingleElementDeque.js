'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = SingleElementDeque;

var _aureoomsJsCollections = require('aureooms-js-collections');

var _Deque = require('./Deque');

var _Deque2 = _interopRequireDefault(_Deque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SingleElementDeque(iterable) {

	this.empty = true;

	this.value = 0;

	if (iterable !== null) this.extend(iterable);
}

SingleElementDeque.prototype = new _Deque2.default();

SingleElementDeque.prototype.len = function () {

	return this.empty ? 0 : 1;
};

SingleElementDeque.prototype.capacity = function () {

	return 1;
};

SingleElementDeque.prototype.values = regeneratorRuntime.mark(function _callee() {
	return regeneratorRuntime.wrap(function _callee$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!this.empty) {
						_context.next = 2;
						break;
					}

					return _context.abrupt('return');

				case 2:
					_context.next = 4;
					return this.value;

				case 4:
				case 'end':
					return _context.stop();
			}
		}
	}, _callee, this);
});

SingleElementDeque.prototype.append = SingleElementDeque.prototype.appendleft = function (x) {

	this.empty = false;
	this.value = x;

	return this;
};

SingleElementDeque.prototype.clear = function () {

	this.empty = true;
	this.value = 0;

	return this;
};

SingleElementDeque.prototype.copy = function () {

	return new SingleElementDeque(this);
};

SingleElementDeque.prototype.pop = SingleElementDeque.prototype.popleft = function () {

	if (this.empty) throw new _aureoomsJsCollections.IndexError("pop / popleft");

	var value = this.value;

	this.empty = true;
	this.value = 0;

	return value;
};

SingleElementDeque.prototype.get = function (i) {

	if (this.empty || i !== 0) throw new _aureoomsJsCollections.IndexError(i);

	return this.value;
};

SingleElementDeque.prototype.set = function (i, value) {

	if (this.empty || i !== 0) throw new _aureoomsJsCollections.IndexError(i);

	this.value = value;

	return this;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbXBsZW1lbnRhdGlvbi9TaW5nbGVFbGVtZW50RGVxdWUuanMiXSwibmFtZXMiOlsiU2luZ2xlRWxlbWVudERlcXVlIiwiaXRlcmFibGUiLCJlbXB0eSIsInZhbHVlIiwiZXh0ZW5kIiwicHJvdG90eXBlIiwibGVuIiwiY2FwYWNpdHkiLCJ2YWx1ZXMiLCJhcHBlbmQiLCJhcHBlbmRsZWZ0IiwieCIsImNsZWFyIiwiY29weSIsInBvcCIsInBvcGxlZnQiLCJnZXQiLCJpIiwic2V0Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFHd0JBLGtCOztBQUh4Qjs7QUFDQTs7Ozs7O0FBRWUsU0FBU0Esa0JBQVQsQ0FBOEJDLFFBQTlCLEVBQXlDOztBQUV2RCxNQUFLQyxLQUFMLEdBQWEsSUFBYjs7QUFFQSxNQUFLQyxLQUFMLEdBQWEsQ0FBYjs7QUFFQSxLQUFLRixhQUFhLElBQWxCLEVBQXlCLEtBQUtHLE1BQUwsQ0FBYUgsUUFBYjtBQUV6Qjs7QUFFREQsbUJBQW1CSyxTQUFuQixHQUErQixxQkFBL0I7O0FBRUFMLG1CQUFtQkssU0FBbkIsQ0FBNkJDLEdBQTdCLEdBQW1DLFlBQWE7O0FBRS9DLFFBQU8sS0FBS0osS0FBTCxHQUFhLENBQWIsR0FBaUIsQ0FBeEI7QUFFQSxDQUpEOztBQU1BRixtQkFBbUJLLFNBQW5CLENBQTZCRSxRQUE3QixHQUF3QyxZQUFhOztBQUVwRCxRQUFPLENBQVA7QUFFQSxDQUpEOztBQU1BUCxtQkFBbUJLLFNBQW5CLENBQTZCRyxNQUE3QiwyQkFBc0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBRWhDLEtBQUtOLEtBRjJCO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUFBQSxZQUkvQixLQUFLQyxLQUowQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUF0Qzs7QUFRQUgsbUJBQW1CSyxTQUFuQixDQUE2QkksTUFBN0IsR0FDQVQsbUJBQW1CSyxTQUFuQixDQUE2QkssVUFBN0IsR0FBMEMsVUFBV0MsQ0FBWCxFQUFlOztBQUV4RCxNQUFLVCxLQUFMLEdBQWEsS0FBYjtBQUNBLE1BQUtDLEtBQUwsR0FBYVEsQ0FBYjs7QUFFQSxRQUFPLElBQVA7QUFFQSxDQVJEOztBQVVBWCxtQkFBbUJLLFNBQW5CLENBQTZCTyxLQUE3QixHQUFxQyxZQUFhOztBQUVqRCxNQUFLVixLQUFMLEdBQWEsSUFBYjtBQUNBLE1BQUtDLEtBQUwsR0FBYSxDQUFiOztBQUVBLFFBQU8sSUFBUDtBQUVBLENBUEQ7O0FBU0FILG1CQUFtQkssU0FBbkIsQ0FBNkJRLElBQTdCLEdBQW9DLFlBQWE7O0FBRWhELFFBQU8sSUFBSWIsa0JBQUosQ0FBd0IsSUFBeEIsQ0FBUDtBQUVBLENBSkQ7O0FBTUFBLG1CQUFtQkssU0FBbkIsQ0FBNkJTLEdBQTdCLEdBQ0FkLG1CQUFtQkssU0FBbkIsQ0FBNkJVLE9BQTdCLEdBQXVDLFlBQWE7O0FBRW5ELEtBQUssS0FBS2IsS0FBVixFQUFrQixNQUFNLHNDQUFnQixlQUFoQixDQUFOOztBQUVsQixLQUFNQyxRQUFRLEtBQUtBLEtBQW5COztBQUVBLE1BQUtELEtBQUwsR0FBYSxJQUFiO0FBQ0EsTUFBS0MsS0FBTCxHQUFhLENBQWI7O0FBRUEsUUFBT0EsS0FBUDtBQUVBLENBWkQ7O0FBY0FILG1CQUFtQkssU0FBbkIsQ0FBNkJXLEdBQTdCLEdBQW1DLFVBQVdDLENBQVgsRUFBZTs7QUFFakQsS0FBSyxLQUFLZixLQUFMLElBQWNlLE1BQU0sQ0FBekIsRUFBNkIsTUFBTSxzQ0FBZ0JBLENBQWhCLENBQU47O0FBRTdCLFFBQU8sS0FBS2QsS0FBWjtBQUVBLENBTkQ7O0FBUUFILG1CQUFtQkssU0FBbkIsQ0FBNkJhLEdBQTdCLEdBQW1DLFVBQVdELENBQVgsRUFBZWQsS0FBZixFQUF1Qjs7QUFFekQsS0FBSyxLQUFLRCxLQUFMLElBQWNlLE1BQU0sQ0FBekIsRUFBNkIsTUFBTSxzQ0FBZ0JBLENBQWhCLENBQU47O0FBRTdCLE1BQUtkLEtBQUwsR0FBYUEsS0FBYjs7QUFFQSxRQUFPLElBQVA7QUFFQSxDQVJEIiwiZmlsZSI6IlNpbmdsZUVsZW1lbnREZXF1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluZGV4RXJyb3IgfSBmcm9tICdhdXJlb29tcy1qcy1jb2xsZWN0aW9ucycgO1xuaW1wb3J0IERlcXVlIGZyb20gJy4vRGVxdWUnIDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2luZ2xlRWxlbWVudERlcXVlICggaXRlcmFibGUgKSB7XG5cblx0dGhpcy5lbXB0eSA9IHRydWUgO1xuXG5cdHRoaXMudmFsdWUgPSAwIDtcblxuXHRpZiAoIGl0ZXJhYmxlICE9PSBudWxsICkgdGhpcy5leHRlbmQoIGl0ZXJhYmxlICkgO1xuXG59XG5cblNpbmdsZUVsZW1lbnREZXF1ZS5wcm90b3R5cGUgPSBuZXcgRGVxdWUoICkgO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLmxlbiA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMuZW1wdHkgPyAwIDogMSA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLmNhcGFjaXR5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gMSA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKiAoICkge1xuXG5cdGlmICggdGhpcy5lbXB0eSApIHJldHVybiA7XG5cblx0eWllbGQgdGhpcy52YWx1ZSA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLmFwcGVuZCA9XG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLmFwcGVuZGxlZnQgPSBmdW5jdGlvbiAoIHggKSB7XG5cblx0dGhpcy5lbXB0eSA9IGZhbHNlIDtcblx0dGhpcy52YWx1ZSA9IHggO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblNpbmdsZUVsZW1lbnREZXF1ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoICkge1xuXG5cdHRoaXMuZW1wdHkgPSB0cnVlIDtcblx0dGhpcy52YWx1ZSA9IDAgO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblNpbmdsZUVsZW1lbnREZXF1ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIG5ldyBTaW5nbGVFbGVtZW50RGVxdWUoIHRoaXMgKSA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLnBvcCA9XG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLnBvcGxlZnQgPSBmdW5jdGlvbiAoICkge1xuXG5cdGlmICggdGhpcy5lbXB0eSApIHRocm93IG5ldyBJbmRleEVycm9yKCBcInBvcCAvIHBvcGxlZnRcIiApIDtcblxuXHRjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWUgO1xuXG5cdHRoaXMuZW1wdHkgPSB0cnVlIDtcblx0dGhpcy52YWx1ZSA9IDAgO1xuXG5cdHJldHVybiB2YWx1ZSA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICggaSApIHtcblxuXHRpZiAoIHRoaXMuZW1wdHkgfHwgaSAhPT0gMCApIHRocm93IG5ldyBJbmRleEVycm9yKCBpICkgO1xuXG5cdHJldHVybiB0aGlzLnZhbHVlIDtcblxufSA7XG5cblNpbmdsZUVsZW1lbnREZXF1ZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKCBpICwgdmFsdWUgKSB7XG5cblx0aWYgKCB0aGlzLmVtcHR5IHx8IGkgIT09IDAgKSB0aHJvdyBuZXcgSW5kZXhFcnJvciggaSApIDtcblxuXHR0aGlzLnZhbHVlID0gdmFsdWUgO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG4iXX0=